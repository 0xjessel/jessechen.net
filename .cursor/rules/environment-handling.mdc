---
description: Rules for environment variable management
globs: {.env*,next.config.js}
---
# Environment Handling Rules

These rules apply to environment configuration and management.

## Security
- Never commit actual environment values to repository
- Use strong encryption for sensitive values
- Rotate secrets regularly
- Implement proper access controls

## Environment Files
- Maintain `.env.default` with all required variables
```env
# Vercel deployment info
NEXT_PUBLIC_VERCEL_URL = "http://localhost:3000/"
NEXT_PUBLIC_VERCEL_GIT_COMMIT_SHA = "2610a858daeed2adaa49353ecfa4347889859f12"
NEXT_PUBLIC_VERCEL_GIT_COMMIT_MESSAGE = "Add commit SHA/message to footer"

# Instagram API credentials
IG_USER_ID = "17841401609650232"
IG_ACCESS_TOKEN = "il0ve1g"

# Cloudinary configuration
CLOUDINARY_CLOUD_NAME = "jessel"      # Required for Python scripts
NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME = "jessel"  # Required for client-side components
CLOUDINARY_API_KEY = "555"
CLOUDINARY_API_SECRET = "b1g_s3cr3t"
```

## Documentation
- Document all environment variables in README
- Include description and purpose for each variable
- Document any default values
- Specify required vs optional variables

## Type Safety
- Use strong typing for environment variables
```typescript
// env.d.ts
declare namespace NodeJS {
  interface ProcessEnv {
    NEXT_PUBLIC_VERCEL_URL: string;
    NEXT_PUBLIC_VERCEL_GIT_COMMIT_SHA: string;
    NEXT_PUBLIC_VERCEL_GIT_COMMIT_MESSAGE: string;
    IG_USER_ID: string;
    IG_ACCESS_TOKEN: string;
    CLOUDINARY_CLOUD_NAME: string;      // Used by Python scripts
    NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME: string;  // Used by client-side code
    CLOUDINARY_API_KEY: string;
    CLOUDINARY_API_SECRET: string;
  }
}
```

## Validation
- Include validation for required environment variables
```typescript
function validateEnv() {
  const required = [
    'NEXT_PUBLIC_VERCEL_URL',
    'IG_USER_ID',
    'IG_ACCESS_TOKEN',
    'CLOUDINARY_CLOUD_NAME',           // Required for Python scripts
    'NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME', // Required for client-side code
    'CLOUDINARY_API_KEY',
    'CLOUDINARY_API_SECRET',
    // ... other required variables
  ];
  
  for (const var of required) {
    if (!process.env[var]) {
      throw new Error(`Missing required environment variable: ${var}`);
    }
  }
}
```

## Special Cases

### Cloudinary Cloud Name
The application maintains two environment variables for the Cloudinary cloud name:
- `CLOUDINARY_CLOUD_NAME`: Used by Python scripts (ig_fetch.py) for server-side operations
- `NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME`: Used by client-side components (CldImage)

Both variables should contain the same value. This duplication is maintained for compatibility with existing Python scripts.

## Configuration Management
- Separate development and production configurations
- Implement proper fallback values
- Handle configuration updates gracefully
- Document configuration changes

## Deployment
- Ensure proper environment setup in Vercel
- Maintain separate configurations for different environments
- Implement proper secret management
- Document deployment requirements